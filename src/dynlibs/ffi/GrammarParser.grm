%{
open GrammarSyntax
%}

/* This concrete MLYACC grammar and the associated semantic
   productions have been so written that they could be generated
   mechanically from an entirely abstract, and consequently
   parsemonious, description of the syntax such as will be found at
   the end of this file. */

%token <string> IDENTIFIER
%token <string> RULE_IDENTIFIER
%token <string> LITERAL
%token <string> TERMINAL

%token ONE
%token OF
%token EQUALS
%token COLON
%token SEMICOLON
%token EPSILON
%token BAR
%token OPT
%token EOF

%start File

%type <GrammarSyntax.Tree> File RuleList GrammaticalRuleList
    GrammaticalRule AlternateList Alternate EmptyAlternate SymbolList
    LiteralRule TerminalRule LiteralList Symbol LiteralSymbol
    Identifier TerminalList OptionalEquals OptionalMarker LexicalRule
    LexicalRuleList IdentifierList

%%

File :
    RuleList EOF { $1 }
  | EOF                                     { mkNonTerm("rule-list",[]) }
;

RuleList :
          LexicalRuleList SEMICOLON SEMICOLON
                      GrammaticalRuleList   { mkNonTerm("rule-list",[$1,$4]) }
;

LexicalRuleList :
   LexicalRule                 { mkNonTerm("lexical-rule-list", [$1]) }
 | LexicalRuleList LexicalRule { mkNonTerm("lexical-rule-list", [$1,$2]) }
;

LexicalRule :
   LiteralRule              { mkNonTerm("lexical-rule",[$1]) }
 | TerminalRule             { mkNonTerm("lexical-rule",[$1]) }
;

LiteralRule :
   RULE_IDENTIFIER LITERAL             { mkNonTerm("literal-rule",[mkTerm($1),mkTerm($2)]) }
 | RULE_IDENTIFIER ONE OF LiteralList  { mkNonTerm("literal-rule",[mkTerm($1),$4]) }
;

TerminalRule:
   RULE_IDENTIFIER TERMINAL            { mkNonTerm("terminal-rule",[mkTerm($1),mkTerm($2)]) }
 | RULE_IDENTIFIER ONE OF TerminalList { mkNonTerm("terminal-rule",[mkTerm($1),$4]) }
;

LiteralList :
   OptionalEquals LITERAL { mkNonTerm("literal-list",[$1,mkTerm($2)]) }
 | LiteralList LITERAL    { mkNonTerm("literal-list",[$1,mkTerm($2)]) }
;

OptionalEquals :
  EQUALS         { mkNonTerm("optional-equals",[mkTerm("=")]) }
 | /* nothing */ { mkNonTerm("optional-equals",[]) }
;

TerminalList :
   TERMINAL              { mkNonTerm("terminal-list",[mkTerm($1)]) }
 | TerminalList TERMINAL { mkNonTerm("terminal-list",[$1,mkTerm($2)]) }
;

GrammaticalRuleList :
   GrammaticalRule                     { mkNonTerm("grammatical-rule-list", [$1]) }
 | GrammaticalRuleList GrammaticalRule { mkNonTerm("grammatical-rule-list", [$1,$2]) }
;

GrammaticalRule :
   RULE_IDENTIFIER AlternateList         { mkNonTerm("grammatical-rule",[mkTerm($1),$2]) }
 | RULE_IDENTIFIER ONE OF LiteralList    { mkNonTerm("grammatical-rule",[mkTerm($1),$4]) }
 | RULE_IDENTIFIER ONE OF IdentifierList { mkNonTerm("grammatical-rule",[mkTerm($1),$4]) }
;

IdentifierList :
   IDENTIFIER                { mkNonTerm("identifier-list",[mkTerm($1)]) }
 | IdentifierList IDENTIFIER { mkNonTerm("identifier-list",[$1,mkTerm($2)]) }
;

AlternateList : 
   Alternate                   { mkNonTerm("alternate-list",[$1]) }
 | AlternateList BAR Alternate { mkNonTerm("alternate-list",[$1,$3]) }
;

Alternate :
   SymbolList     { mkNonTerm("alternate",[$1]) }
 | EmptyAlternate { mkNonTerm("alternate",[$1]) }
;

EmptyAlternate:
   EPSILON        { mkNonTerm("empty-alternate",[mkTerm("ε")]) }
;

SymbolList :
   Symbol            { mkNonTerm("symbol-list",[$1]) }
 | SymbolList Symbol { mkNonTerm("symbol-list",[$1,$2]) }
;

Symbol :
   LiteralSymbol                { mkNonTerm("symbol",[$1]) }
 | LiteralSymbol OptionalMarker { mkNonTerm("symbol",[$1,$2]) }
 | Identifier                   { mkNonTerm("symbol",[$1]) }
 | Identifier OptionalMarker    { mkNonTerm("symbol",[$1,$2]) }
;

OptionalMarker:
  OPT { mkNonTerm("optional-marker",[mkTerm("[opt]")]) }
;

LiteralSymbol :
   LITERAL   { mkNonTerm("literal-symbol",[mkTerm($1)]) }
;

Identifier :
  IDENTIFIER { mkNonTerm("identifier",[mkTerm($1)]) }
;

/*

COLON: ':'
EQUALS: '='
BAR: '|'
OPT: '[opt]'
EPSILON: 'ε'
ONE: 'one'
OF: 'of'

LITERAL: one of <"'[^']+'" <'"[^"]+"'
TERMINAL: one of <"<'[^']+'" <'<"[^"]+"'
IDENTIFIER: <'[a-zA-Z][-a-zA-Z0-9]*'
RULE-IDENTIFIER: <'[a-zA-Z][-a-zA-Z0-9]*:'

rule-list:
   lexical-rule-list SEMICOLON SEMICOLON grammatical-rule-list

lexical-rule-list:
   lexical-rule
 | lexical-rule-list lexical-rule

lexical-rule:
   literal-rule
 | terminal-rule

literal-rule:
   RULE-IDENTIFIER LITERAL
 | RULE-IDENTIFIER ONE OF literal-list

terminal-rule:
   RULE-IDENTIFIER TERMINAL
 | RULE-IDENTIFIER ONE OF terminal-list

literal-list:
   optional-equals LITERAL
 | literal-list LITERAL

terminal-list:
   TERMINAL
 | terminal-list TERMINAL

optional-equals:
   EQUALS
 | ε

grammatical-rule-list:
   grammatical-rule
 | grammatical-rule-list grammatical-rule

grammatical-rule:
   RULE-IDENTIFIER alternate-list
 | RULE-IDENTIFIER ONE OF literal-list
 | RULE-IDENTIFIER ONE OF identifier-list

identifier-list:
   IDENTIFIER
 | identifier-list IDENTIFIER

alternate-list:
   alternate
 | alternate-list '|' alternate

alternate:
   symbol-list
 | empty-alternate

empty-alternate:
   'ε'

symbol-list:
   symbol
 | symbol-list symbol

symbol:
   literal-symbol
 | literal-symbol optional-marker
 | identifier
 | identifier optional-marker

optional-marker:
   OPT

literal-symbol:
   LITERAL

identifier:
   IDENTIFIER

*/
