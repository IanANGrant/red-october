(* Ffi functions, lightning functions, static vectors, etc. *)
(* This module requires Dynlib and GNU lightning, and the GNU FFI
   library to be installed *)

type svector

datatype ffi_type_enum = 
    FFI_TYPE_VOID
  | FFI_TYPE_INT
  | FFI_TYPE_FLOAT
  | FFI_TYPE_DOUBLE
  | FFI_TYPE_LONGDOUBLE
  | FFI_TYPE_UINT8
  | FFI_TYPE_SINT8
  | FFI_TYPE_UINT16
  | FFI_TYPE_SINT16
  | FFI_TYPE_UINT32
  | FFI_TYPE_SINT32
  | FFI_TYPE_UINT64
  | FFI_TYPE_SINT64
  | FFI_TYPE_STRUCT
  | FFI_TYPE_POINTER

datatype ffi_type_struct_pointers =
   ffi_type_void
 | ffi_type_uchar
 | ffi_type_schar
 | ffi_type_uint
 | ffi_type_sint
 | ffi_type_ushort
 | ffi_type_sshort
 | ffi_type_ulong
 | ffi_type_slong
 | ffi_type_float
 | ffi_type_double
 | ffi_type_longdouble
 | ffi_type_pointer
 | ffi_type_uint8
 | ffi_type_sint8
 | ffi_type_uint16
 | ffi_type_sint16
 | ffi_type_uint32
 | ffi_type_sint32
 | ffi_type_uint64
 | ffi_type_sint64

datatype ffi_status_enum =
    FFI_OK
 |  FFI_BAD_TYPEDEF
 |  FFI_BAD_ABI

datatype ffi_int_size = 
    Int
 |  Short
 |  Long

datatype ffi_signed =
   Signed
 | Unsigned

datatype ffi_float_size =
   Single
 | Double
 | LongDouble

datatype ffi_array_dimension =
   Incomplete
 | Dim of int

datatype ffi_type =
   Pointer of ffi_type
 | Array of ffi_array_dimension * ffi_type
 | Const of ffi_type
 | Function of ffi_type * ffi_type_enum option
 | Integer of ffi_signed * ffi_int_size
 | Structure of ffi_type list
 | Float of ffi_float_size
 | Character of ffi_signed
 | Void
 | VariadicFunction of ffi_type * ffi_type list * ffi_type_enum option

val svec_make : Int.int -> svector

val svec_clear : svector -> unit

val svec_getlength : svector -> Int.int

val svec_from_vector : Word8Vector.vector -> svector

val svec_from_word_vector : word vector -> svector

val wordVectorFromVector : Word8Vector.vector -> word vector

val vectorFromWordVector : word vector -> Word8Vector.vector

val svec_getbuffercptr   :  svector -> Dynlib.cptr

val svec_getpointervalue : svector -> Word8Vector.vector

val svec_getcptrvalue : Dynlib.cptr -> Word8Vector.vector

val svec_getcptr : Word8Vector.vector -> Dynlib.cptr

val svec_getcptrword : Dynlib.cptr -> Word.word

val svec_getcptrwordv : Dynlib.cptr -> Word.word Vector.vector

val svec_setcptrvalue : Word8Vector.vector -> Dynlib.cptr

val svec_setcptrword : Word.word -> Dynlib.cptr

val svec_getvecword : Word8Vector.vector -> Word.word

val svec_setvecword : Word.word -> Word8Vector.vector

val svec_getvalue   : svector -> Int.int -> Int.int -> Word8Vector.vector

val svec_setvalue   : svector -> Int.int -> Word8Vector.vector -> Int.int

val svec_getstringcptr : string -> Dynlib.cptr

val svec_getveccptr : Word8Vector.vector -> Dynlib.cptr

val svec_getcptrvec : Dynlib.cptr -> Word8Vector.vector

val svec_getvecstring : Word8Vector.vector -> string

val jit_get_arch : unit -> string

val jit_get_byteorder : unit -> Int.int

val jit_get_little_endian : unit -> Int.int

val jit_get_big_endian : unit -> Int.int

val jit_get_wordsize : unit -> Int.int

val jit_get_codetablelength : unit -> Int.int

val jit_get_sizeslength : unit -> Int.int

val jit_get_constantslength : unit -> Int.int

val jit_get_codetableentry : Int.int -> Int.int * string

val jit_get_sizesentry : Int.int -> Int.int * string

val jit_get_constantsentry : Int.int -> Word.word * string

val jit_initialise_constants : bool -> unit

val BYTE_ORDER : Int.int

val LITTLE_ENDIAN : Int.int

val BIG_ENDIAN : Int.int

val jit_get_constant : string -> Word.word

val jit_get_debug : unit -> bool

val jit_set_debug : bool -> unit

val ffi_default_abi : unit -> Int.int

val ffi_cif_length : unit -> Int.int

val ffi_type_length : unit -> Int.int

val ffi_closure_length : unit -> Int.int

val ffi_status_values_length : unit -> Int.int

val ffi_type_values_length : unit -> Int.int

val ffi_type_sizes_length : unit -> Int.int

val ffi_type_struct_length : unit -> Int.int

val ffi_type_struct_pointers_length : unit -> Int.int

val ffi_status_values_entry : Int.int -> Int.int * string

val ffi_type_values_entry : Int.int -> Int.int * string

val ffi_type_sizes_entry : Int.int -> Int.int * string

val ffi_type_struct_entry : Int.int -> Int.int * Int.int * string

val ffi_type_struct_pointers_entry : Int.int -> Word.word * String.string

val typeEnumToInt : ffi_type_enum -> Int.int

val typeEnumFromInt : Int.int -> ffi_type_enum option

val typeToStructPointer : ffi_type_struct_pointers -> Word.word

val statusEnumToInt : ffi_status_enum -> Int.int
val statusEnumFromInt : Int.int -> ffi_status_enum
val statusIntToString : Int.int -> string
val typeEnumToSize : ffi_type_enum -> Int.int

val jit_code : string -> Int.int

val NULL : Dynlib.cptr
val NULLvec : Word8Vector.vector

val putsp : Dynlib.cptr

val ffi_get_valueptr : Dynlib.cptr

val ffi_callbackptr : Dynlib.cptr

val ffi_callbackptr2 : Dynlib.cptr

val ffi_callbackptr3 : Dynlib.cptr

val ffi_getdryrun : unit -> bool

val ffi_setdryrun : bool -> unit

val ffi_dumpbytes : Dynlib.cptr -> Int.int -> unit

val ffi_dumpwords : Dynlib.cptr -> Int.int -> unit

val ffi_dumpvecbytes: Word8Vector.vector -> Int.int -> unit

val ffi_dumpvecwords: Word8Vector.vector -> Int.int -> unit

val svec_cptr_byte_offset : Dynlib.cptr -> int -> Dynlib.cptr
val svec_byte_offset : svector -> Int.int -> Dynlib.cptr
val svec_dumpb : svector -> Int.int -> Int.int -> unit
val svec_dumpw : svector -> Int.int -> Int.int -> unit
val svec_dumpb_all : svector -> unit
val svec_dumpw_all : svector -> unit

val svec_debugb : string -> svector -> unit
val svec_debugw : string -> svector -> unit
val vec_debugb : string -> Word8Vector.vector -> unit
val vec_debugw : string -> Word8Vector.vector -> unit

val ffi_prep_cif_ : Dynlib.cptr -> Int.int -> Int.int -> Dynlib.cptr -> Dynlib.cptr -> Int.int

val ffi_call_ : Dynlib.cptr -> Dynlib.cptr -> Dynlib.cptr -> Dynlib.cptr -> unit

val ffi_call_n_ : Dynlib.cptr -> Dynlib.cptr -> Dynlib.cptr -> Dynlib.cptr -> unit

val realToDoubleVector : real -> Word8Vector.vector
val doubleVectorToReal : Word8Vector.vector -> real

val realToFloatVector : real -> Word8Vector.vector
val floatVectorToReal : Word8Vector.vector -> real

val vectorToList : Word8Vector.vector -> word8 list
val listToVector : word8 list -> Word8Vector.vector

val vectorFromWordList : Word.word list -> Word8Vector.vector
val wordListFromVector : Word8Vector.vector -> Word.word list

val vectorFromString : string -> Word8Vector.vector
val stringFromVector : Word8Vector.vector -> string

val svec_from_string : string -> svector

val ffi_default_abi_number : Int.int
val ffi_cif_struct_size : Int.int
val ffi_type_struct_size : Int.int
val ffi_closure_size : Int.int

val ffi_trampoline :
  string -> Dynlib.cptr -> ffi_type -> ('a -> Word8Vector.vector) -> (Word8Vector.vector -> 'b) -> 'a -> 'b

val mkargssvec : Word8Vector.vector list -> Word8Vector.vector * svector
